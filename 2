#!/bin/bash

# Script to set up WAL-based streaming replication between DB1 (10.250.64.12) and DB2 (10.250.64.10)

# Exit on any error
set -e

# Step 1: Configure DB1 (Primary)
ssh sysadmin@10.250.64.12 "sudo -u postgres sh -c 'echo \"wal_level = replica\" >> /etc/postgresql/14/main/postgresql.conf'"
ssh sysadmin@10.250.64.12 "sudo -u postgres sh -c 'echo \"archive_mode = on\" >> /etc/postgresql/14/main/postgresql.conf'"
ssh sysadmin@10.250.64.12 "sudo -u postgres sh -c 'echo \"archive_command = \\\"cp %p /var/lib/pgsql/archive/%f\\\"\" >> /etc/postgresql/14/main/postgresql.conf'"
ssh sysadmin@10.250.64.12 "sudo -u postgres sh -c 'echo \"max_wal_senders = 10\" >> /etc/postgresql/14/main/postgresql.conf'"
ssh sysadmin@10.250.64.12 "sudo -u postgres sh -c 'echo \"wal_keep_size = 256MB\" >> /etc/postgresql/14/main/postgresql.conf'"
ssh sysadmin@10.250.64.12 "sudo -u postgres mkdir -p /var/lib/pgsql/archive"
ssh sysadmin@10.250.64.12 "sudo -u postgres chmod 700 /var/lib/pgsql/archive"
ssh sysadmin@10.250.64.12 "sudo -u postgres sh -c 'echo \"host replication postgres 10.250.64.10/32 scram-sha-256\" >> /etc/postgresql/14/main/pg_hba.conf'"
ssh sysadmin@10.250.64.12 "sudo systemctl restart postgresql"

# Step 2: Configure DB2 (Standby)
ssh sysadmin@10.250.64.10 "sudo systemctl stop postgresql"
ssh sysadmin@10.250.64.10 "sudo -u postgres rm -rf /var/lib/pgsql/14/data/*"
ssh sysadmin@10.250.64.10 "sudo -u postgres pg_basebackup -h 10.250.64.12 -p 5432 -U postgres -D /var/lib/pgsql/14/data/ -Fp --checkpoint=fast -R"
ssh sysadmin@10.250.64.10 "sudo -u postgres sh -c 'echo \"hot_standby = on\" >> /var/lib/pgsql/14/data/postgresql.conf'"
ssh sysadmin@10.250.64.10 "sudo -u postgres sh -c 'echo \"primary_conninfo = \\\"host=10.250.64.12 port=5432 user=postgres password=drdengdemo@2025#\\\"\" >> /var/lib/pgsql/14/data/postgresql.conf'"
ssh sysadmin@10.250.64.10 "ls /var/lib/pgsql/14/data/standby.signal"
ssh sysadmin@10.250.64.10 "sudo chown -R postgres:postgres /var/lib/pgsql/14/data/"
ssh sysadmin@10.250.64.10 "sudo systemctl start postgresql"

# Step 3: Verify replication
ssh sysadmin@10.250.64.12 "sudo -u postgres psql -h 10.250.64.12 -p 5432 -c 'SELECT * FROM pg_stat_replication;'"
ssh sysadmin@10.250.64.10 "sudo -u postgres psql -h 10.250.64.10 -p 5432 -c 'SELECT pg_is_in_recovery();'"
ssh sysadmin@10.250.64.12 "sudo -u postgres psql -h 10.250.64.12 -p 5432 -d app_db1 -c 'CREATE TABLE test_sync (id SERIAL PRIMARY KEY, data TEXT); INSERT INTO test_sync (data) VALUES (\"Sync test\");'"
ssh sysadmin@10.250.64.10 "sudo -u postgres psql -h 10.250.64.10 -p 5432 -d app_db1 -c 'SELECT * FROM test_sync;'"

echo "Replication setup and verification completed successfully"

ssh sysadmin@10.250.64.12
rm setup_replication.sh
nano setup_replication.sh
# Copy and paste the script above
# Save: Ctrl+O, Enter, Ctrl+X
chmod +x setup_replication.sh
./setup_replication.sh
