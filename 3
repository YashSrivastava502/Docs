Step 1: Back Up All Databases from DB1

sudo -u postgres pg_dumpall -h 10.0.0.4 -p 5432 > /tmp/all_databases.sql

Not needed:
Set up .pgpass for passwordless access (optional but recommended): To avoid password prompts, create a .pgpass file on DB1:

echo "10.0.0.4:5432:*:postgres:Yash@0505" | sudo -u postgres tee -a ~postgres/.pgpass
sudo -u postgres chmod 0600 ~postgres/.pgpass

Verify the backup: Check that /tmp/all_databases.sql exists and is not empty:

ls -lh /tmp/all_databases.sql


Step 2: Transfer the Backup to DB2

Copy the backup file to DB2: From DB1, transfer /tmp/all_databases.sql to DB2 (10.0.0.5):

scp /tmp/all_databases.sql postgres@10.0.0.5:/tmp/

Verify the file on DB2: On DB2, confirm the file was transferred:

ls -lh /tmp/all_databases.sql

Step 3: Restore the Backup to DB2

Set up .pgpass on DB2 (optional but recommended): To avoid password prompts during restore, create a .pgpass file on DB2:
sudo -u postgres psql -h 10.0.0.5 -p 5432 -f /tmp/all_databases.sql

Restore the backup using psql: On DB2, restore all databases and global objects:
sudo -u postgres psql -h 10.0.0.5 -p 5432 -f /tmp/all_databases.sql


Verify the restore: List databases on DB2 to confirm they were created
sudo -u postgres psql -h 10.0.0.5 -p 5432 -l



Step 4: Configure WAL-Based Streaming Replication

On DB1 (Primary, 10.0.0.4)
Configure postgresql.conf: Edit the configuration file (e.g., /etc/postgresql/<version>/main/postgresql.conf or /var/lib/pgsql/<version>/data/postgresql.conf):


sudo -u postgres nano /etc/postgresql/<version>/main/postgresql.conf

Add or modify:
wal_level = replica
archive_mode = on
archive_command = 'cp %p /var/lib/pgsql/archive/%f'
max_wal_senders = 10
wal_keep_size = 256MB


Create the archive directory:
sudo -u postgres mkdir -p /var/lib/pgsql/archive
sudo -u postgres chmod 700 /var/lib/pgsql/archive

Configure pg_hba.conf: Edit the host-based authentication file:

sudo -u postgres nano /etc/postgresql/<version>/main/pg_hba.conf

Add:
host replication postgres 10.0.0.5/32 scram-sha-256

Restart PostgreSQL on DB1: Apply changes:

sudo systemctl restart postgresql


On DB2 (Standby, 10.0.0.5)
Stop PostgreSQL:
sudo systemctl stop postgresql


Take a base backup from DB1: Since you’ve restored the databases, you can overwrite DB2’s data directory with a fresh base backup to ensure consistency:
sudo -u postgres rm -rf /var/lib/pgsql/<version>/data/*
sudo -u postgres pg_basebackup -h 10.0.0.4 -p 5432 -U postgres -D /var/lib/pgsql/<version>/data/ -Fp --checkpoint=fast -R


Configure postgresql.conf on DB2: Edit the configuration file:
sudo -u postgres nano /var/lib/pgsql/<version>/data/postgresql.conf


Add or modify:
hot_standby = on
primary_conninfo = 'host=10.0.0.4 port=5432 user=postgres password=Yash@0505'


Ensure standby.signal exists: The pg_basebackup -R command should have created /var/lib/pgsql/<version>/data/standby.signal. Verify:
ls /var/lib/pgsql/<version>/data/standby.signal

Set data directory permissions:

sudo chown -R postgres:postgres /var/lib/pgsql/<version>/data/

Start PostgreSQL on DB2:
sudo systemctl start postgresql

Step 5: Verify Replication
Check replication status on DB1:
sudo -u postgres psql -h 10.0.0.4 -p 5432 -c "SELECT * FROM pg_stat_replication;"


Confirm DB2 is in recovery mode
sudo -u postgres psql -h 10.0.0.5 -p 5432 -c "SELECT pg_is_in_recovery();"

