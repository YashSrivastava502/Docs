#!/usr/bin/env python3

import smtplib
from email.mime.text import MIMEText
from email.utils import formatdate
from datetime import datetime
import pandas as pd

# === CONFIGURATION ===
CSV_FILE = "/tmp/last_reboot_times.txt"  # CSV-formatted file
SMTP_SERVER = "mail.yourdomain.com"
SMTP_PORT = 25
SENDER = "noreply@yourdomain.com"
RECIPIENTS = ["admin@yourdomain.com"]
SUBJECT = "Last Reboot Times Report"

def read_csv_file(path):
    """
    Read CSV file with columns: Server, Last Reboot
    Example CSV format:
    Server,Last Reboot
    NJPVDMZAPPLP157.tools.local,2025-08-29 03:58
    """
    try:
        df = pd.read_csv(path)
        # Ensure correct column names
        df.columns = [col.strip() for col in df.columns]
        return df
    except FileNotFoundError:
        print(f"File {path} not found.")
        return pd.DataFrame(columns=["Server", "Last Reboot"])
    except pd.errors.EmptyDataError:
        print(f"File {path} is empty.")
        return pd.DataFrame(columns=["Server", "Last Reboot"])

def filter_today(df):
    """Filter only rows where Last Reboot date is today."""
    if df.empty:
        return df
    today = datetime.today().strftime("%Y-%m-%d")
    return df[df['Last Reboot'].astype(str).str.startswith(today)]

def send_mail(html_body):
    """Send HTML email."""
    msg = MIMEText(html_body, "html")
    msg["From"] = SENDER
    msg["To"] = ", ".join(RECIPIENTS)
    msg["Date"] = formatdate(localtime=True)
    msg["Subject"] = SUBJECT

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as smtp:
        smtp.sendmail(SENDER, RECIPIENTS, msg.as_string())

if __name__ == "__main__":
    # Read CSV file
    df = read_csv_file(CSV_FILE)

    # Print all fetched data in console
    if df.empty:
        print("No data fetched from file.")
    else:
        print("All fetched data:\n")
        print(df.to_string(index=False))

    # Filter today's reboots
    today_df = filter_today(df)

    # Prepare email body
    if today_df.empty:
        email_body = "<p>Hello Team,</p><p>No server is rebooted.</p>"
    else:
        email_body = "<p>Hello Team,</p><p>Please find the details of the rebooted VMs:</p>"
        email_body += today_df.to_html(index=False, border=1, justify="center")

    # Send email
    send_mail(email_body)
    print("\nEmail sent successfully.")
