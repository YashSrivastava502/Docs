#!/usr/bin/env python3

import smtplib
from email.mime.text import MIMEText
from email.utils import formatdate
from datetime import datetime
import pandas as pd

# === CONFIGURATION ===
TXT_FILE = "/tmp/last_reboot_times.txt"
SMTP_SERVER = "mail.yourdomain.com"   # Replace with your SMTP relay
SMTP_PORT = 25
SENDER = "noreply@yourdomain.com"
RECIPIENTS = ["admin@yourdomain.com"]
SUBJECT = "Last Reboot Times Report"

def parse_to_dataframe(path):
    """Read the txt file and convert into DataFrame with Server & Last Reboot."""
    servers, reboots = [], []
    try:
        with open(path, "r") as f:
            lines = [line.strip() for line in f if line.strip()]
        for i in range(0, len(lines), 2):
            if i + 1 < len(lines):
                server = lines[i].rstrip(",")
                boot_line = lines[i+1]
                if boot_line.startswith("system boot"):
                    reboot_date = boot_line.replace("system boot", "").strip()
                    servers.append(server)
                    reboots.append(reboot_date)
    except FileNotFoundError:
        return pd.DataFrame(columns=["Server", "Last Reboot"])

    df = pd.DataFrame({"Server": servers, "Last Reboot": reboots})
    return df

def filter_today(df):
    """Filter rows where Last Reboot is today's date."""
    if df.empty:
        return df
    today = datetime.today().strftime("%Y-%m-%d")
    return df[df["Last Reboot"].str.startswith(today)]

def send_mail(html_body):
    """Send email with the given HTML body."""
    msg = MIMEText(html_body, "html")
    msg["From"] = SENDER
    msg["To"] = ", ".join(RECIPIENTS)
    msg["Date"] = formatdate(localtime=True)
    msg["Subject"] = SUBJECT

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as smtp:
        smtp.sendmail(SENDER, RECIPIENTS, msg.as_string())

if __name__ == "__main__":
    # Parse the txt file into a DataFrame
    df = parse_to_dataframe(TXT_FILE)

    # Print all fetched data in console
    if df.empty:
        print("No data fetched from file.")
    else:
        print("All fetched data from file:\n")
        print(df.to_string(index=False))

    # Filter for today
    today_df = filter_today(df)

    # Prepare email body
    if today_df.empty:
        body = "<p>Hello Team,</p><p>No server is rebooted.</p>"
    else:
        body = "<p>Hello Team,</p><p>Please find the details of the rebooted VMs:</p>"
        # Convert DataFrame to HTML table
        body += today_df.to_html(index=False, border=1, justify="center")

    # Send email
    send_mail(body)
    print("\nEmail sent successfully.")
