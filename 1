#!/usr/bin/env python3

import pandas as pd
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from email.utils import formatdate
import os

# === CONFIGURATION ===
TXT_FILE = "/tmp/last_reboot_times.txt"
CSV_FILE = "/tmp/last_reboot_times.csv"
FILTERED_CSV = "/tmp/last_reboot_times_today.csv"

SMTP_SERVER = "mail.yourdomain.com"
SMTP_PORT = 25
SENDER = "noreply@yourdomain.com"
RECIPIENTS = ["admin@yourdomain.com"]
SUBJECT = "Last Reboot Times Report"

# === STEP 1: Convert TXT -> CSV ===
servers, labels, datetimes, dates = [], [], [], []

try:
    with open(TXT_FILE, "r") as f:
        lines = [line.strip() for line in f if line.strip()]

    i = 0
    while i < len(lines) - 1:
        server_line = lines[i].rstrip(",")
        boot_line = lines[i + 1]

        if boot_line.lower().startswith("system boot"):
            reboot_time = boot_line.replace("system boot", "").strip()
            reboot_date = reboot_time.split()[0]  # only YYYY-MM-DD
            servers.append(server_line)
            labels.append("system boot")
            datetimes.append(reboot_time)
            dates.append(reboot_date)
        i += 2

    # Create DataFrame with blank header for last column
    df = pd.DataFrame({
        "Server": servers,
        "Boot Label": labels,
        "DateTime": datetimes,
        "": dates   # 4th column has no header
    })

    df.to_csv(CSV_FILE, index=False)

except FileNotFoundError:
    print(f"{TXT_FILE} not found.")
    df = pd.DataFrame(columns=["Server", "Boot Label", "DateTime", ""])

# === STEP 2: Filtering in CSV ===
try:
    df_csv = pd.read_csv(CSV_FILE)
except FileNotFoundError:
    df_csv = pd.DataFrame(columns=["Server", "Boot Label", "DateTime", ""])

today = datetime.today().strftime("%Y-%m-%d")

# Use column index instead of header "" to avoid KeyError
if not df_csv.empty and df_csv.shape[1] >= 4:
    today_df = df_csv[df_csv.iloc[:, 3].astype(str) == today]
else:
    today_df = pd.DataFrame()

# Save filtered CSV
today_df.to_csv(FILTERED_CSV, index=False)

# === STEP 3: Print all data ===
if df_csv.empty:
    print("No data fetched from file.")
else:
    print("All fetched data:\n")
    print(df_csv.to_string(index=False))

# === STEP 4: Prepare email body ===
if today_df.empty:
    email_body = "<p>Hello Team,</p><p>No server is rebooted.</p>"
else:
    email_body = "<p>Hello Team,</p><p>Please find the details of the rebooted VMs:</p>"
    email_body += today_df.to_html(index=False, border=1, justify="center")

# === STEP 5: Prepare email with attachment ===
msg = MIMEMultipart()
msg["From"] = SENDER
msg["To"] = ", ".join(RECIPIENTS)
msg["Date"] = formatdate(localtime=True)
msg["Subject"] = SUBJECT

# Attach body
msg.attach(MIMEText(email_body, "html"))

# Attach filtered CSV (even if empty)
if os.path.exists(FILTERED_CSV):
    with open(FILTERED_CSV, "rb") as f:
        part = MIMEBase("application", "octet-stream")
        part.set_payload(f.read())
    encoders.encode_base64(part)
    part.add_header("Content-Disposition", f'attachment; filename="{os.path.basename(FILTERED_CSV)}"')
    msg.attach(part)

# Send mail
with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as smtp:
    smtp.sendmail(SENDER, RECIPIENTS, msg.as_string())

print("\nEmail sent successfully.")

# === STEP 6: Cleanup CSV files ===
for file in [CSV_FILE, FILTERED_CSV]:
    try:
        os.remove(file)
        print(f"Deleted {file}")
    except FileNotFoundError:
        pass
