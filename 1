#!/usr/bin/env python3

import smtplib
from email.mime.text import MIMEText
from email.utils import formatdate
from datetime import datetime
import pandas as pd

# === CONFIGURATION ===
TXT_FILE = "/tmp/last_reboot_times.txt"
SMTP_SERVER = "mail.yourdomain.com"   # Replace with your SMTP server
SMTP_PORT = 25
SENDER = "noreply@yourdomain.com"
RECIPIENTS = ["admin@yourdomain.com"]
SUBJECT = "Last Reboot Times Report"

def parse_to_dataframe(path):
    """Parse the text file into a DataFrame with columns: Server, Last Reboot"""
    servers, reboots = [], []

    try:
        with open(path, "r") as f:
            lines = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        return pd.DataFrame(columns=["Server", "Last Reboot"])

    # Iterate over lines, assume every 2 lines: Server line, system boot line
    i = 0
    while i < len(lines) - 1:
        server_line = lines[i].rstrip(",")
        boot_line = lines[i+1]
        if boot_line.lower().startswith("system boot"):
            reboot_time = boot_line.replace("system boot", "").strip()
            servers.append(server_line)
            reboots.append(reboot_time)
        i += 2

    df = pd.DataFrame({"Server": servers, "Last Reboot": reboots})
    return df

def filter_today(df):
    """Filter DataFrame to only include rows with today's date."""
    today = datetime.today().strftime("%Y-%m-%d")
    if df.empty:
        return df
    # Check if 'Last Reboot' starts with today's date
    return df[df['Last Reboot'].str.startswith(today)]

def send_mail(html_body):
    """Send email with HTML content."""
    msg = MIMEText(html_body, "html")
    msg["From"] = SENDER
    msg["To"] = ", ".join(RECIPIENTS)
    msg["Date"] = formatdate(localtime=True)
    msg["Subject"] = SUBJECT

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as smtp:
        smtp.sendmail(SENDER, RECIPIENTS, msg.as_string())

if __name__ == "__main__":
    # Parse file into DataFrame
    df = parse_to_dataframe(TXT_FILE)

    # Print all fetched data
    if df.empty:
        print("No data fetched from file.")
    else:
        print("All fetched data:\n")
        print(df.to_string(index=False))

    # Filter only today's reboots
    today_df = filter_today(df)

    # Prepare email body
    if today_df.empty:
        email_body = "<p>Hello Team,</p><p>No server is rebooted.</p>"
    else:
        email_body = "<p>Hello Team,</p><p>Please find the details of the rebooted VMs:</p>"
        email_body += today_df.to_html(index=False, border=1, justify="center")

    # Send email
    send_mail(email_body)
    print("\nEmail sent successfully.")
