#!/bin/bash

# ------------------ üîß CONFIGURATION ---------------------
RG="usei-dr-rgp01"
LOCATION="East US"

# VM1 - Source
VM1_NAME="use1-dr-websrv01-vm"
VNET1="usel-drd-fp-inf-net01"
SUBNET1="usel-dr01-fp-srv-snet01"

# VM2 - Destination
VM2_NAME="use1-dr-websrv02-vm"
VNET2="use1-drd-fp-hub-net01"
SUBNET2="usel-drd-fp-hub-srv-snet01"

# VM config
VM_SIZE="Standard_B1s"
USERNAME="azureuser"
PASSWORD="YourStrongPassword123!"

# Snapshot / Storage
SNAPSHOT_NAME="use1-dr-websrv01-snapshot"
DISK_NAME="use1-dr-websrv01-clone-disk"
STORAGE_ACCOUNT="fpinfbackup"
CONTAINER="syseng"
BLOB_PATH="use1-dr-websrv01-vm/use1-dr-websrv01-osdisk.vhd"

# ------------------ STEP 0: Ensure Container Exists ---------------------
echo "üìÅ Checking if container '$CONTAINER' exists..."
az storage container create \
  --account-name "$STORAGE_ACCOUNT" \
  --name "$CONTAINER" \
  --public-access off 1>/dev/null

# ------------------ STEP 1: Create Source VM ---------------------
echo "üñ•Ô∏è Creating VM1 ($VM1_NAME)..."
az vm create \
  --resource-group "$RG" \
  --name "$VM1_NAME" \
  --image Ubuntu2204 \
  --size "$VM_SIZE" \
  --admin-username "$USERNAME" \
  --admin-password "$PASSWORD" \
  --vnet-name "$VNET1" \
  --subnet "$SUBNET1" \
  --public-ip-address "" \
  --location "$LOCATION" \
  --nsg "${VM1_NAME}-nsg" \
  --output none

# ------------------ STEP 2: Install NGINX + Blue Page ---------------------
echo "üåê Installing NGINX and Blue Page on $VM1_NAME..."
az vm extension set \
  --resource-group "$RG" \
  --vm-name "$VM1_NAME" \
  --name CustomScript \
  --publisher Microsoft.Azure.Extensions \
  --settings '{"commandToExecute":"sudo apt update && sudo apt install -y nginx && echo \"<html><body style='\''background-color:blue;'\''><h1>Blue Page</h1></body></html>\" | sudo tee /var/www/html/index.html && sudo systemctl restart nginx"}' \
  --output none

# ------------------ STEP 3: Deallocate + Snapshot ---------------------
echo "üõë Deallocating VM before snapshot..."
az vm deallocate --resource-group "$RG" --name "$VM1_NAME" --output none

echo "üì¶ Getting OS disk name..."
OSDISK_NAME=$(az vm show --resource-group "$RG" --name "$VM1_NAME" --query "storageProfile.osDisk.name" -o tsv)

echo "üì∏ Creating snapshot..."
az snapshot create \
  --resource-group "$RG" \
  --source "$OSDISK_NAME" \
  --name "$SNAPSHOT_NAME" \
  --location "$LOCATION" \
  --output none

# ------------------ STEP 4: Upload VHD to Blob ---------------------
echo "üîó Generating snapshot SAS URL..."
SAS_URL=$(az snapshot grant-access \
  --resource-group "$RG" \
  --name "$SNAPSHOT_NAME" \
  --duration-in-seconds 3600 \
  --query accessSas -o tsv)

echo "‚òÅÔ∏è Uploading snapshot to blob path: $CONTAINER/$BLOB_PATH ..."
az storage blob copy start \
  --account-name "$STORAGE_ACCOUNT" \
  --destination-container "$CONTAINER" \
  --destination-blob "$BLOB_PATH" \
  --source-uri "$SAS_URL" \
  --output none

echo "‚è≥ Waiting 2 minutes for blob copy to complete..."
sleep 120

# ------------------ STEP 5: Create Managed Disk from VHD ---------------------
BLOB_URL="https://${STORAGE_ACCOUNT}.blob.core.windows.net/${CONTAINER}/${BLOB_PATH}"
echo "üíΩ Creating managed disk from blob..."
az disk create \
  --resource-group "$RG" \
  --name "$DISK_NAME" \
  --source "$BLOB_URL" \
  --os-type Linux \
  --location "$LOCATION" \
  --output none

# ------------------ STEP 6: Create VM2 from Cloned Disk ---------------------
echo "üñ•Ô∏è Creating VM2 ($VM2_NAME) from snapshot disk..."
az vm create \
  --resource-group "$RG" \
  --name "$VM2_NAME" \
  --attach-os-disk "$DISK_NAME" \
  --os-type Linux \
  --size "$VM_SIZE" \
  --vnet-name "$VNET2" \
  --subnet "$SUBNET2" \
  --admin-username "$USERNAME" \
  --admin-password "$PASSWORD" \
  --public-ip-address "" \
  --location "$LOCATION" \
  --nsg "${VM2_NAME}-nsg" \
  --output none

# ------------------ ‚úÖ COMPLETE ---------------------
echo ""
echo "‚úÖ VMs created with no Public IPs."
echo "üï∏Ô∏è You can test internal access from a VM in the same or peered VNet."
